import telebot
from telebot import types
import random
import json
import os
import uuid
import logging
import threading
import time
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger()

# –í—Å—Ç–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7795536845:AAGvBiDeTm2UHNpe-SI_QXz0NrdXBb2QB5o'  # **–í–∞–∂–Ω–æ:** –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –Ω–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –µ–≥–æ –ø—É–±–ª–∏—á–Ω–æ

bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
BALANCES_FILE = 'user_balances.json'
GAMES_FILE = 'games.json'
TRANSFERS_FILE = 'transfers.json'
BANK_FILE = 'bank.json'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
INITIAL_BALANCE = 1000
GRID_ROWS = 4
GRID_COLS = 5
TOTAL_MINES = 5
MULTIPLIER = 1.3
COMPENSATION_BALANCE = 109  # –ë–∞–ª–∞–Ω—Å-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ø–æ—Ç–µ—Ä–µ

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤
def load_data(file_path):
    if not os.path.exists(file_path):
        return {}
    with open(file_path, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª
def save_data(file_path, data):
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
user_balances = load_data(BALANCES_FILE)
games = load_data(GAMES_FILE)
transfers = load_data(TRANSFERS_FILE)
bank_data = load_data(BANK_FILE)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
def update_balances(user_id, balance, username=None):
    if str(user_id) not in user_balances:
        user_balances[str(user_id)] = {"balance": balance, "username": username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"}
    else:
        user_balances[str(user_id)]["balance"] = balance
    save_data(BALANCES_FILE, user_balances)

def update_game(user_id, game_data):
    games[str(user_id)] = game_data
    save_data(GAMES_FILE, games)

def delete_game(user_id):
    if str(user_id) in games:
        del games[str(user_id)]
        save_data(GAMES_FILE, games)

def create_transfer(transfer_id, sender_id, recipient_id, amount):
    transfers[transfer_id] = {
        "sender_id": sender_id,
        "recipient_id": recipient_id,
        "amount": amount
    }
    save_data(TRANSFERS_FILE, transfers)

def delete_transfer(transfer_id):
    if transfer_id in transfers:
        del transfers[transfer_id]
        save_data(TRANSFERS_FILE, transfers)

def update_bank(user_id, bank_info):
    bank_data[str(user_id)] = bank_info
    save_data(BANK_FILE, bank_data)

def delete_bank(user_id):
    if str(user_id) in bank_data:
        del bank_data[str(user_id)]
        save_data(BANK_FILE, bank_data)

# 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_game(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if str(user_id) not in user_balances:
        user_balances[str(user_id)] = {"balance": INITIAL_BALANCE, "username": username}
        save_data(BALANCES_FILE, user_balances)

    welcome_message = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href='tg://user?id={user_id}'>{username}</a>!\n\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–æ–π. "
        f"–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è –æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è—Ö! –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Ç–µ–±–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é, "
        f"—á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –∏–≥—Ä–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ—á–µ—à—å. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º! ‚ù§Ô∏è\n\n"
        f"‚ÑπÔ∏è –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å–µ—Ö –º–µ—Ö–∞–Ω–∏–∫–∞—Ö –±–æ—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–≥—Ä—ã."
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏ "–¢–æ–ø"
    main_markup = types.InlineKeyboardMarkup()
    info_button = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="show_info")
    top_button = types.InlineKeyboardButton(text="–¢–æ–ø", callback_data="show_top")
    main_markup.add(info_button, top_button)

    bot.send_message(chat_id, welcome_message, parse_mode='HTML', reply_markup=main_markup)

# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id

    if call.data == "show_info":
        mechanics_message = (
            "üîç <b>–ú–µ—Ö–∞–Ω–∏–∫–∏ –±–æ—Ç–∞:</b>\n\n"
            "‚Ä¢ <b>–º–∏–Ω—ã {—Å—É–º–º–∞}</b> ‚Äî –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π.\n"
            "‚Ä¢ <b>/–ø–µ—Ä–µ–¥–∞—Ç—å {–∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞} {—Å—É–º–º–∞}</b> ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
            "–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–∏—Å–∞–ª –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª /start.\n"
            "‚Ä¢ <b>/–±–∞–Ω–∫ {—Å—É–º–º–∞}</b> ‚Äî –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç.\n"
            "‚Ä¢ <b>/–±–∞–Ω–∫ –±–∞–ª–∞–Ω—Å</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ.\n"
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=mechanics_message,
            parse_mode='HTML'
        )
        bot.answer_callback_query(call.id)

    elif call.data == "show_top":
        top_users = sorted(user_balances.items(), key=lambda x: x[1]["balance"], reverse=True)[:10]
        top_message = "üèÜ <b>–¢–æ–ø 10 —á–µ–ª–æ–≤–µ–∫ –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n\n"
        if not top_users:
            top_message += "–¢–æ–ø –ø–æ–∫–∞ –ø—É—Å—Ç."
        else:
            for idx, (uid, info) in enumerate(top_users, start=1):
                username = info["username"]
                balance = info["balance"]
                top_message += f"{idx}. <a href='tg://user?id={uid}'>{username}</a> ‚Äî <b>{balance}</b> üí∞\n"

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "<< –ù–∞–∑–∞–¥"
        back_markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="back_to_main")
        back_markup.add(back_button)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=top_message,
            parse_mode='HTML',
            reply_markup=back_markup
        )
        bot.answer_callback_query(call.id)

    elif call.data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
        username = user_balances.get(str(user_id), {}).get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        welcome_message = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href='tg://user?id={user_id}'>{username}</a>!\n\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–æ–π. "
            f"–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è –æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è—Ö! –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Ç–µ–±–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é, "
            f"—á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –∏–≥—Ä–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ—á–µ—à—å. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º! ‚ù§Ô∏è\n\n"
            f"‚ÑπÔ∏è –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å–µ—Ö –º–µ—Ö–∞–Ω–∏–∫–∞—Ö –±–æ—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–≥—Ä—ã."
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏ "–¢–æ–ø"
        main_markup = types.InlineKeyboardMarkup()
        info_button = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="show_info")
        top_button = types.InlineKeyboardButton(text="–¢–æ–ø", callback_data="show_top")
        main_markup.add(info_button, top_button)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=welcome_message,
            parse_mode='HTML',
            reply_markup=main_markup
        )
        bot.answer_callback_query(call.id)

    elif call.data.startswith("cell:"):
        handle_cell_click(call)

    elif call.data == "collect":
        handle_collect(call)

    elif call.data.startswith("transfer_confirm:"):
        handle_transfer_confirm(call)

    elif call.data == "terminate_game":
        handle_terminate_game(call)

    elif call.data == "retry":
        handle_retry(call)

    elif call.data == "withdraw_bank":
        handle_withdraw_bank(call)

    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)

# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã "–ú–∏–Ω—ã"
@bot.message_handler(regexp=r"^–º–∏–Ω—ã (\d+)$")
def mines_game(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        bet = int(message.text.split()[1])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    except (IndexError, ValueError):
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–º–∏–Ω—ã <—Å—É–º–º–∞>'.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
    if bet <= 0:
        bot.send_message(chat_id, "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏
    current_balance = user_balances.get(str(user_id), {}).get("balance", INITIAL_BALANCE)
    if bet > current_balance:
        bot.send_message(chat_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–≥—Ä–µ
    if str(user_id) in games:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å"
        terminate_markup = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="terminate_game")
        )
        bot.send_message(chat_id, "‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.", reply_markup=terminate_markup)
        return

    bombs_indexes = random.sample(range(GRID_ROWS * GRID_COLS), TOTAL_MINES)  # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –±–æ–º–±

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    games[str(user_id)] = {
        "bet": bet,
        "bombs": bombs_indexes,
        "revealed": [False] * (GRID_ROWS * GRID_COLS),
        "game_message_id": None,
        "chat_id": chat_id
    }
    save_data(GAMES_FILE, games)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    markup = generate_markup(user_id)

    game_message = (
        f"üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!</b>\n\n"
        f"üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {bet}\n"
        f"üíµ <b>–ë–∞–ª–∞–Ω—Å:</b> {current_balance}\n"
        f"üí£ <b>–ú–∏–Ω—ã:</b> {TOTAL_MINES}\n"
        f"üíé <b>–ù–∞–π–¥–∏—Ç–µ –∞–ª–º–∞–∑—ã, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É!</b>"
    )
    sent_message = bot.send_message(
        chat_id,
        text=game_message,
        parse_mode='HTML',
        reply_markup=markup
    )
    games[str(user_id)]["game_message_id"] = sent_message.message_id
    save_data(GAMES_FILE, games)

# 4. –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–≥—Ä—ã
def generate_markup(user_id):
    markup = types.InlineKeyboardMarkup()
    game = games[str(user_id)]
    for i in range(GRID_ROWS):
        row = []
        for j in range(GRID_COLS):
            index = i * GRID_COLS + j
            if not game["revealed"][index]:
                button_text = '?'
            else:
                if index in game["bombs"]:
                    button_text = 'üí£'
                else:
                    button_text = 'üíé'
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'cell:' –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —è—á–µ–µ–∫
            callback_data = f"cell:{index}"
            row.append(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))
        markup.add(*row)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"
    markup.add(types.InlineKeyboardButton(text="üèÜ –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à", callback_data="collect"))
    return markup

# 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —è—á–µ–π–∫—É
def handle_cell_click(call):
    user_id = call.from_user.id
    if str(user_id) not in games:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.", show_alert=True)
        return

    game = games[str(user_id)]
    data = call.data

    try:
        index = int(data.split(":")[1])
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    if game["revealed"][index]:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞.", show_alert=True)
        return

    game["revealed"][index] = True
    update_game(user_id, game)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã

    if index in game["bombs"]:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–ª –Ω–∞ –º–∏–Ω—É
        bet = game["bet"]
        current_balance = user_balances.get(str(user_id), {}).get("balance", INITIAL_BALANCE)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–Ω–µ—Ç –ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <= 0 –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
        if current_balance - bet <= 0:
            new_balance = COMPENSATION_BALANCE
        else:
            new_balance = current_balance - bet

        user_balances[str(user_id)]["balance"] = new_balance
        update_balances(user_id, new_balance)

        losing_message = (
            f"üí• <b>–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É!</b>\n\n"
            f"üí∞ <b>–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å—Ç–∞–≤–∫—É:</b> {bet}\n"
            f"üíµ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞:</b> {new_balance}\n"
        )

        if current_balance - bet <= 0:
            losing_message += (
                f"‚ö†Ô∏è –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Ç–µ—Ä—è–Ω. –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {COMPENSATION_BALANCE}.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üöÄ"
            )
        else:
            losing_message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üöÄ"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
        retry_markup = types.InlineKeyboardMarkup()
        retry_markup.add(types.InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry"))

        bot.edit_message_text(
            text=losing_message,
            chat_id=game["chat_id"],
            message_id=game["game_message_id"],
            parse_mode='HTML',
            reply_markup=retry_markup
        )
        delete_game(user_id)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—à–µ–ª –∞–ª–º–∞–∑
        game["bet"] = round(game["bet"] * MULTIPLIER)
        update_game(user_id, game)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã

        remaining_revealed = sum(game["revealed"])
        # –û—Å—Ç–∞–ª–æ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫
        remaining_safe_cells = (GRID_ROWS * GRID_COLS) - TOTAL_MINES - (
            remaining_revealed - len([b for b in game["bombs"] if game["revealed"][b]])
        )

        if remaining_safe_cells <= 0:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫
            bet = game["bet"]
            current_balance = user_balances.get(str(user_id), {}).get("balance", INITIAL_BALANCE)
            new_balance = current_balance + bet
            user_balances[str(user_id)]["balance"] = new_balance
            update_balances(user_id, new_balance)

            success_message = (
                f"üéâ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É!</b>\n\n"
                f"üí∞ <b>–í–∞—à –≤—ã–∏–≥—Ä—ã—à:</b> {bet}\n"
                f"üíµ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {new_balance}\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üöÄ"
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
            retry_markup = types.InlineKeyboardMarkup()
            retry_markup.add(types.InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry"))

            bot.edit_message_text(
                text=success_message,
                chat_id=game["chat_id"],
                message_id=game["game_message_id"],
                parse_mode='HTML',
                reply_markup=retry_markup
            )
            delete_game(user_id)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
            markup = generate_markup(user_id)
            current_balance = user_balances.get(str(user_id), {}).get("balance", INITIAL_BALANCE)
            continued_message = (
                f"üéÆ <b>–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!</b>\n\n"
                f"üíé <b>–í—ã –Ω–∞—à–ª–∏ –∞–ª–º–∞–∑!</b>\n"
                f"üí∞ <b>–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {MULTIPLIER}x:</b> {game['bet']}\n"
                f"üíµ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_balance}\n"
                f"–ò–≥—Ä–∞–π—Ç–µ –¥–∞–ª—å—à–µ –∏–ª–∏ –∑–∞–±–µ—Ä–∏—Ç–µ –≤—ã–∏–≥—Ä—ã—à. üèÜ"
            )
            bot.edit_message_text(
                text=continued_message,
                chat_id=game["chat_id"],
                message_id=game["game_message_id"],
                parse_mode='HTML',
                reply_markup=markup
            )

# 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–æ—Ä–∞ –≤—ã–∏–≥—Ä—ã—à–∞
def handle_collect(call):
    user_id = call.from_user.id
    if str(user_id) not in games:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.", show_alert=True)
        return

    game = games[str(user_id)]
    bet = game["bet"]
    current_balance = user_balances.get(str(user_id), {}).get("balance", INITIAL_BALANCE)
    new_balance = current_balance + bet  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
    user_balances[str(user_id)]["balance"] = new_balance
    update_balances(user_id, new_balance)

    success_message = (
        f"üéâ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üí∞ <b>–í–∞—à –≤—ã–∏–≥—Ä—ã—à:</b> {bet}\n"
        f"üíµ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {new_balance}\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üöÄ"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
    retry_markup = types.InlineKeyboardMarkup()
    retry_markup.add(types.InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry"))

    bot.edit_message_text(
        text=success_message,
        chat_id=game["chat_id"],
        message_id=game["game_message_id"],
        parse_mode='HTML',
        reply_markup=retry_markup
    )
    delete_game(user_id)
    bot.answer_callback_query(call.id)  # –°–∫—Ä—ã—Ç–∏–µ "—á–∞—Å–∏–∫–æ–≤"

# 7. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–µ–Ω–µ–≥
def handle_transfer_confirm(call):
    # –§–æ—Ä–º–∞—Ç: transfer_confirm:{transfer_id}:{action}
    try:
        _, transfer_id, action = call.data.split(":")
    except ValueError:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    if transfer_id not in transfers:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    transfer = transfers[transfer_id]
    sender_id = transfer["sender_id"]
    recipient_id = transfer["recipient_id"]
    amount = transfer["amount"]

    if action == "transfer":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
        sender_balance = user_balances.get(str(sender_id), {}).get("balance", INITIAL_BALANCE)
        if amount > sender_balance:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.", show_alert=True)
            delete_transfer(transfer_id)
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –∑–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        user_balances[str(sender_id)]["balance"] = sender_balance - amount
        user_balances[str(recipient_id)]["balance"] = user_balances.get(str(recipient_id), {}).get("balance", 0) + amount
        update_balances(sender_id, user_balances[str(sender_id)]["balance"])
        update_balances(recipient_id, user_balances[str(recipient_id)]["balance"])

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_link_markup = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(
                text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é",
                url=f"tg://user?id={sender_id}"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π
        try:
            bot.send_message(
                recipient_id,
                f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {sender_id}.",
                reply_markup=sender_link_markup
            )
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ–¥–∞—á–µ.", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        try:
            bot.send_message(sender_id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {recipient_id}.")
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        bot.edit_message_text(
            text=(
                f"‚úÖ <b>–ü–µ—Ä–µ–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {amount}\n"
                f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ID:</b> {sender_id}\n"
                f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å ID:</b> {recipient_id}\n"
            ),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode='HTML'
        )
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ
        delete_transfer(transfer_id)
    elif action == "cancel":
        # –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É
        bot.edit_message_text(
            text=(
                f"‚ùå <b>–ü–µ—Ä–µ–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {amount}\n"
                f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ID:</b> {sender_id}\n"
                f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å ID:</b> {recipient_id}\n"
            ),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode='HTML'
        )
        try:
            bot.send_message(sender_id, f"‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á—É {amount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {recipient_id}.")
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –æ–± –æ—Ç–º–µ–Ω–µ: {e}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if str(sender_id) in games:
            delete_game(sender_id)
            bot.send_message(sender_id, "‚úÖ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ
        delete_transfer(transfer_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    bot.answer_callback_query(call.id)  # –°–∫—Ä—ã—Ç–∏–µ "—á–∞—Å–∏–∫–æ–≤"

# 8. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å"
def handle_terminate_game(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    if str(user_id) in games:
        delete_game(user_id)
        bot.edit_message_text(
            text="‚úÖ –í–∞—à–∞ –∏–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode='HTML'
        )
        bot.answer_callback_query(call.id, "–í–∞—à–∞ –∏–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
    else:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.")
        bot.answer_callback_query(call.id)  # –°–∫—Ä—ã—Ç–∏–µ "—á–∞—Å–∏–∫–æ–≤"

# 9. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
def handle_retry(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    if str(user_id) in games:
        bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    current_balance = user_balances.get(str(user_id), {}).get("balance", INITIAL_BALANCE)

    if current_balance <= 0:
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –∏–ª–∏ –º–µ–Ω—å—à–µ 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        user_balances[str(user_id)]["balance"] = COMPENSATION_BALANCE
        update_balances(user_id, COMPENSATION_BALANCE, user_balances[str(user_id)].get("username"))
        bot.send_message(chat_id, f"‚ö†Ô∏è –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ {COMPENSATION_BALANCE} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –∫–∞–∫ –≤–µ—Å—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    bet = current_balance

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏
    if bet > current_balance:
        bot.send_message(chat_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance}")
        return

    bombs_indexes = random.sample(range(GRID_ROWS * GRID_COLS), TOTAL_MINES)  # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –±–æ–º–±

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    games[str(user_id)] = {
        "bet": bet,
        "bombs": bombs_indexes,
        "revealed": [False] * (GRID_ROWS * GRID_COLS),
        "game_message_id": call.message.message_id,
        "chat_id": chat_id
    }
    save_data(GAMES_FILE, games)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    markup = generate_markup(user_id)

    new_game_message = (
        f"üéÆ <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!</b>\n\n"
        f"üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {bet}\n"
        f"üíµ <b>–ë–∞–ª–∞–Ω—Å:</b> {current_balance}\n"
        f"üí£ <b>–ú–∏–Ω—ã:</b> {TOTAL_MINES}\n"
        f"üíé <b>–ù–∞–π–¥–∏—Ç–µ –∞–ª–º–∞–∑—ã, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É!</b>"
    )

    bot.edit_message_text(
        text=new_game_message,
        chat_id=chat_id,
        message_id=call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)  # –°–∫—Ä—ã—Ç–∏–µ "—á–∞—Å–∏–∫–æ–≤"

# 10. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–µ–Ω–µ–≥ /–ø–µ—Ä–µ–¥–∞—Ç—å
@bot.message_handler(commands=['–ø–µ—Ä–µ–¥–∞—Ç—å'])
def transfer_money(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    parts = message.text.split()

    if len(parts) != 3:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '/–ø–µ—Ä–µ–¥–∞—Ç—å {–∞–π–¥–∏} {—Å—É–º–º–∞}'.")
        return

    _, recipient_id_str, amount_str = parts

    try:
        recipient_id = int(recipient_id_str)
        amount = int(amount_str)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ê–π–¥–∏ –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    if recipient_id == user_id:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    if amount <= 0:
        bot.send_message(chat_id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    sender_balance = user_balances.get(str(user_id), {}).get("balance", INITIAL_BALANCE)
    if amount > sender_balance:
        bot.send_message(chat_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {sender_balance}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∏ –Ω–∞—á–∞–ª –ª–∏ –æ–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
    if str(recipient_id) not in user_balances:
        bot.send_message(chat_id, "‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start.")
        return

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
    transfer_id = str(uuid.uuid4())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É
    create_transfer(transfer_id, user_id, recipient_id, amount)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    confirmation_message = (
        f"üì§ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏:</b>\n\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {amount}\n"
        f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ID:</b> {user_id}\n"
        f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å ID:</b> {recipient_id}\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —ç—Ç–∏ –¥–µ–Ω—å–≥–∏?"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–µ—Ä–µ–¥–∞—Ç—å" –∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
    confirm_markup = types.InlineKeyboardMarkup()
    confirm_markup.row(
        types.InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–¥–∞—Ç—å", callback_data=f"transfer_confirm:{transfer_id}:transfer"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"transfer_confirm:{transfer_id}:cancel")
    )

    bot.send_message(chat_id, confirmation_message, parse_mode='HTML', reply_markup=confirm_markup)

# 11. –ö–æ–º–∞–Ω–¥—ã –±–∞–Ω–∫–∞
@bot.message_handler(commands=['–±–∞–Ω–∫'])
def bank_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    parts = message.text.split()

    if len(parts) == 1:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '/–±–∞–Ω–∫ {—Å—É–º–º–∞}' –∏–ª–∏ '/–±–∞–Ω–∫ –±–∞–ª–∞–Ω—Å'.")
        return

    if parts[1].lower() == "–±–∞–ª–∞–Ω—Å":
        handle_bank_balance(message)
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫
        try:
            amount = int(parts[1])
        except ValueError:
            bot.send_message(chat_id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        if amount <= 0:
            bot.send_message(chat_id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        current_balance = user_balances.get(str(user_id), {}).get("balance", INITIAL_BALANCE)
        if amount > current_balance:
            bot.send_message(chat_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance}")
            return

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_balances[str(user_id)]["balance"] = current_balance - amount
        update_balances(user_id, user_balances[str(user_id)]["balance"], user_balances[str(user_id)].get("username"))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫
        if str(user_id) not in bank_data:
            bank_data[str(user_id)] = {
                "balance": amount,
                "deposit_time": datetime.utcnow().isoformat()
            }
        else:
            bank_data[str(user_id)]["balance"] += amount
        update_bank(user_id, bank_data[str(user_id)])

        bot.send_message(chat_id, f"üíé –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª–∏ {amount} –≤ –±–∞–Ω–∫.\n\n"
                                  f"‚Ä¢ –ö–∞–∂–¥—ã–µ —á–∞—Å –≤—Å—è —Å—É–º–º–∞ –≤ –±–∞–Ω–∫–µ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 1.3x.\n"
                                  f"‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ '/–±–∞–Ω–∫ –±–∞–ª–∞–Ω—Å', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ.")

        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è —Å—É–º–º—ã —á–µ—Ä–µ–∑ —á–∞—Å
        threading.Thread(target=bank_multiplier, args=(user_id,)).start()

def handle_bank_balance(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if str(user_id) not in bank_data:
        bot.send_message(chat_id, "üí∞ –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ.")
        return

    bank_info = bank_data[str(user_id)]
    balance = bank_info["balance"]
    deposit_time = datetime.fromisoformat(bank_info["deposit_time"])
    elapsed_time = datetime.utcnow() - deposit_time
    next_multiplier = deposit_time + timedelta(hours=1)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
    time_remaining = next_multiplier - datetime.utcnow()
    if time_remaining.total_seconds() < 0:
        time_remaining = timedelta(seconds=0)

    time_remaining_str = str(time_remaining).split(".")[0]  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏

    balance_message = (
        f"üí∞ <b>–°—É–º–º–∞ –≤ –±–∞–Ω–∫–µ:</b> {balance}\n"
        f"‚è≥ <b>–£–º–Ω–æ–∂–∏—Ç—å—Å—è —á–µ—Ä–µ–∑:</b> {time_remaining_str}\n"
        f"üïí <b>–í—Ä–µ–º–µ–Ω–∏ –≤ –±–∞–Ω–∫–µ:</b> {int(elapsed_time.total_seconds() // 3600)} —á–∞—Å–æ–≤\n"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–°–Ω—è—Ç—å"
    withdraw_markup = types.InlineKeyboardMarkup()
    withdraw_button = types.InlineKeyboardButton(text="üí∏ –°–Ω—è—Ç—å", callback_data="withdraw_bank")
    withdraw_markup.add(withdraw_button)

    bot.send_message(chat_id, balance_message, parse_mode='HTML', reply_markup=withdraw_markup)

def handle_withdraw_bank(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    if str(user_id) not in bank_data:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ.", show_alert=True)
        return

    bank_info = bank_data[str(user_id)]
    balance = bank_info["balance"]

    if balance <= 0:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ.", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_balance = user_balances.get(str(user_id), {}).get("balance", INITIAL_BALANCE)
    user_balances[str(user_id)]["balance"] = current_balance + balance
    update_balances(user_id, user_balances[str(user_id)]["balance"], user_balances[str(user_id)].get("username"))

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞
    delete_bank(user_id)

    bot.edit_message_text(
        text=f"üí∏ –í—ã —Å–Ω—è–ª–∏ {balance} —Å –±–∞–Ω–∫–∞.",
        chat_id=chat_id,
        message_id=call.message.message_id,
        parse_mode='HTML'
    )
    bot.answer_callback_query(call.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–Ω–∫–∞.", show_alert=True)

# 12. –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–∂–µ–Ω–∏—è —Å—É–º–º—ã –≤ –±–∞–Ω–∫–µ –Ω–∞ 1.3x —á–µ—Ä–µ–∑ —á–∞—Å
def bank_multiplier(user_id):
    time.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å
    if str(user_id) not in bank_data:
        return

    bank_info = bank_data[str(user_id)]
    bank_info["balance"] = round(bank_info["balance"] * MULTIPLIER)
    bank_info["deposit_time"] = datetime.utcnow().isoformat()
    update_bank(user_id, bank_info)

    try:
        bot.send_message(user_id, f"üí∞ –í–∞—à –¥–µ–ø–æ–∑–∏—Ç –≤ –±–∞–Ω–∫–µ –±—ã–ª —É–º–Ω–æ–∂–µ–Ω –Ω–∞ {MULTIPLIER}x –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–ø–µ—Ä—å {bank_info['balance']}!")
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
        threading.Thread(target=bank_multiplier, args=(user_id,)).start()
    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# 13. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: message.text and message.text.startswith('/'))
def handle_unknown(message):
    bot.send_message(message.chat.id, "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")

# 14. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        bot.polling(non_stop=True)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
